import logging
import os
from typing import Optional

# Configure logging
LOG_DIR = 'logs'
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

SYSTEM_LOG_FILE = os.path.join(LOG_DIR, 'system-logs.log')
THREAT_LOG_FILE = os.path.join(LOG_DIR, 'threat-logs.log')
INTRUSION_LOG_FILE = os.path.join(LOG_DIR, 'intrusion-detection.log')

# Create loggers
system_logger = logging.getLogger('system_logger')
threat_logger = logging.getLogger('threat_logger')
intrusion_logger = logging.getLogger('intrusion_logger')

# Set log levels
system_logger.setLevel(logging.INFO)
threat_logger.setLevel(logging.WARNING)
intrusion_logger.setLevel(logging.INFO)

# Create formatters
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# Create handlers
system_handler = logging.FileHandler(SYSTEM_LOG_FILE)
threat_handler = logging.FileHandler(THREAT_LOG_FILE)
intrusion_handler = logging.FileHandler(INTRUSION_LOG_FILE)

# Set formatters
system_handler.setFormatter(formatter)
threat_handler.setFormatter(formatter)
intrusion_handler.setFormatter(formatter)

# Add handlers to loggers
system_logger.addHandler(system_handler)
threat_logger.addHandler(threat_handler)
intrusion_logger.addHandler(intrusion_handler)

def log_event(event_type: str, message: str, logger_name: Optional[str] = None):
    """Log events based on their type and specified logger."""
    if logger_name == 'threat':
        logger = threat_logger
    elif logger_name == 'intrusion':
        logger = intrusion_logger
    else:
        logger = system_logger

    if event_type == 'INFO':
        logger.info(message)
    elif event_type == 'WARNING':
        logger.warning(message)
    elif event_type == 'ERROR':
        logger.error(message)
    elif event_type == 'CRITICAL':
        logger.critical(message)
    else:
        logger.debug(message)

if __name__ == '__main__':
    log_event('INFO', 'System started successfully.')
    log_event('ERROR', 'Failed to connect to the database.', logger_name='system')
    log_event('WARNING', 'Potential threat detected.', logger_name='threat')
    log_event('INFO', 'Network traffic monitored.', logger_name='intrusion')
    log_event('CRITICAL', 'System is under attack!', logger_name='system')
