import unittest

class TestCloudCompliance(unittest.TestCase):
    def test_validate_config(self):
        valid_config = {"cloud_provider": "AWS", "encryption_enabled": True}
        invalid_config = {"cloud_provider": "AWS"}
        
        # Valid configuration should not raise an error
        try:
            validate_config(valid_config)
        except KeyError:
            self.fail("validate_config raised KeyError unexpectedly!")

        # Invalid configuration should raise a KeyError
        with self.assertRaises(KeyError):
            validate_config(invalid_config)
    
    def test_aws_compliance_checks(self):
        config = {"cloud_provider": "AWS", "encryption_enabled": False}
        compliance_results = {"compliant": True, "violations": []}
        
        aws_compliance_checks(config, compliance_results)
        self.assertFalse(compliance_results["compliant"])
        self.assertIn("Encryption is not enabled for AWS.", compliance_results["violations"])
    
    def test_verify_cloud_compliance(self):
        config = {"cloud_provider": "AWS", "encryption_enabled": False}
        results = verify_cloud_compliance(config)
        
        self.assertFalse(results["compliant"])
        self.assertIn("Encryption is not enabled for AWS.", results["violations"])

if __name__ == "__main__":
    unittest.main()
