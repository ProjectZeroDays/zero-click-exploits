import logging
import subprocess
import json
from typing import Dict, Any

# Initialize logger
logging.basicConfig(level=logging.INFO)

def handle_incident(incident_type: str, severity: str, details: Dict[str, Any]):
    """Handle different types of incidents based on severity."""
    if incident_type == 'ransomware' and severity == 'high':
        logging.info("Executing ransomware playbook...")
        execute_ransomware_playbook(details)
    elif incident_type == 'phishing' and severity == 'medium':
        logging.info("Executing phishing playbook...")
        execute_phishing_playbook(details)
    else:
        logging.info("Executing default incident response...")
        execute_default_response(details)

def execute_ransomware_playbook(details: Dict[str, Any]):
    """Execute the ransomware playbook."""
    try:
        # Example command to isolate the affected system
        command = f"sudo iptables -A INPUT -s {details['target']} -j DROP"
        subprocess.run(command, shell=True, check=True)
        logging.info(f"Isolated system: {details['target']}")
        
        # Notify admin
        notify_admin(f"Ransomware detected on {details['target']}. System isolated.")
    except Exception as e:
        logging.error(f"Error executing ransomware playbook: {e}")

def execute_phishing_playbook(details: Dict[str, Any]):
    """Execute the phishing playbook."""
    try:
        # Example command to block the phishing email
        command = f"sudo postconf -e 'header_checks = regexp:/etc/postfix/header_checks'"
        subprocess.run(command, shell=True, check=True)
        logging.info(f"Blocked phishing email: {details['email']}")
        
        # Notify users
        notify_users(f"Phishing attempt detected from {details['email']}. Email blocked.")
    except Exception as e:
        logging.error(f"Error executing phishing playbook: {e}")

def execute_default_response(details: Dict[str, Any]):
    """Execute the default incident response."""
    logging.info(f"Default response for incident: {details}")

def notify_admin(message: str):
    """Notify the admin about the incident."""
    logging.info(f"Admin notification: {message}")
    # Add logic to send email or SMS to admin

def notify_users(message: str):
    """Notify users about the incident."""
    logging.info(f"User notification: {message}")
    # Add logic to send email or SMS to users

# Example usage
if __name__ == '__main__':
    incident_data = {'type': 'ransomware', 'severity': 'high', 'details': {'target': 'server1'}}
    handle_incident(incident_data['type'], incident_data['severity'], incident_data['details'])
    incident_data = {'type': 'phishing', 'severity': 'medium', 'details': {'email': 'user@example.com'}}
    handle_incident(incident_data['type'], incident_data['severity'], incident_data['details'])
