import logging
from typing import Dict, Any, List
from red_sword.attack_modules import AttackModule
from datetime import datetime

class Dashboard:
    def __init__(self, logger: logging.Logger, settings_manager):
        self.logger = logger
        self.settings_manager = settings_manager
        self.modules = {}
        self.event_log = []
        self.current_view = "main"  # "main" or module name
        self.selected_module = None

    def register_module(self, module: AttackModule):
        self.modules[module.name] = module
        self.logger.info(f"Registered module: {module.name}")

    def log_event(self, message: str, level: str = "info", data: Dict[str, Any] = None):
        self.event_log.append({
            "timestamp": datetime.now().isoformat(),
            "level": level,
            "message": message,
            "data": data
        })
        log_method = getattr(self.logger, level)
        log_method(f"Dashboard: {message} - Data: {data}")

    def display_dashboard(self):
        if self.current_view == "main":
            self._display_main_dashboard()
        elif self.current_view in self.modules:
            self._display_module_details(self.current_view)

    def _display_main_dashboard(self):
        print("----- Main Dashboard -----")
        for name, module in self.modules.items():
            self._display_module_widget(name, module)
        print("--------------------------")

    def _display_module_widget(self, name: str, module: AttackModule):
        status = "Running" if module.is_running else "Stopped"
        print(f"  - {name}: Status - {status}")
        print(f"    Config: {module.config}")
        print(f"    [+] [Start] [Stop]")
        print("    --------------------")

    def control_module(self, module_name: str, action: str, target: str = None, data: Dict[str, Any] = None):
        module = self.modules.get(module_name)
        if module:
            if action == "start":
                module.start(target, data)
                self.log_event(f"Module {module_name} started", data={"target": target, "data": data})
            elif action == "stop":
                module.stop()
                self.log_event(f"Module {module_name} stopped")
            elif action == "expand":
                self.current_view = module_name
                self.selected_module = module_name
            elif action == "clear_log":
                module.event_log = []
                self.log_event(f"Event log cleared for {module_name}")
            else:
                self.logger.warning(f"Invalid action: {action}")
        else:
            self.logger.warning(f"Module not found: {module_name}")

    def _display_module_details(self, module_name: str):
        module = self.modules.get(module_name)
        if module:
            print(f"\n----- {module_name} Details -----")
            print(f"  Status: {'Running' if module.is_running else 'Stopped'}")
            print(f"  Configuration: {module.config}")
            print("  Event Log:")
            for event in module.get_event_log():
                print(f"    - {event['timestamp']} - {event['level']}: {event['message']} - Data: {event['data']}")
            print("  [Clear Log] [Back to Dashboard]")
            print("--------------------------\n")
        else:
            self.logger.warning(f"Module not found: {module_name}")

    def display_event_log(self):
        print("----- Dashboard Event Log -----")
        for event in self.event_log:
            print(f"  - {event['timestamp']} - {event['level']}: {event['message']} - Data: {event['data']}")
        print("-------------------------------")

    def run_cli(self):
        while True:
            self.display_dashboard()
            if self.current_view == "main":
                command = input("Enter command (module_name [start|stop|expand], 'log', 'sanitize_local', 'sanitize_remote', 'exit'): ").strip().lower()
                if command == "log":
                    self.display_event_log()
                elif command == "sanitize_local":
                    self.settings_manager.sanitize_local_logs()
                elif command == "sanitize_remote":
                    target = input("Enter target for remote log sanitization: ").strip()
                    self.settings_manager.sanitize_remote_logs(target)
                elif command == "exit":
                    break
                else:
                    parts = command.split()
                    if len(parts) >= 2:
                        module_name = parts[0]
                        action = parts[1]
                        if len(parts) > 2:
                            target = parts[2]
                        else:
                            target = None
                        self.control_module(module_name, action, target)
                    else:
                        print("Invalid command format.")
            elif self.current_view in self.modules:
                command = input("Enter command ('clear_log', 'back'): ").strip().lower()
                if command == "clear_log":
                    self.control_module(self.current_view, "clear_log")
                elif command == "back":
                    self.current_view = "main"
                    self.selected_module = None
                else:
                    print("Invalid command.")