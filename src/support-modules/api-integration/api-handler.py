import requests
import logging

class APIHandler:
    def __init__(self, api_keys_file):
        self.api_keys = self.load_api_keys(api_keys_file)
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler('api_handler.log')
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

    def load_api_keys(self, api_keys_file):
        try:
            with open(api_keys_file, 'r') as file:
                api_keys = json.load(file)
        except FileNotFoundError:
            api_keys = {}
        return api_keys

    def call_vendor_api(self, vendor, payload):
        api_key = self.api_keys.get(vendor)
        if not api_key:
            self.logger.error(f"API key for vendor {vendor} not found")
            return None

        url = f"https://api.{vendor}.com/endpoint"
        headers = {'Authorization': f'Bearer {api_key}'}
        try:
            response = requests.post(url, json=payload, headers=headers)
            response.raise_for_status()
            self.logger.info(f"API call to {vendor} successful: {response.json()}")
            return response.json()
        except requests.RequestException as e:
            self.logger.error(f"API call to {vendor} failed: {e}")
            return None

    def example_usage(self):
        payload = {'data': 'example'}
        response = self.call_vendor_api('vendor1', payload)
        if response:
            print(f"API call successful: {response}")
        else:
            print("API call failed")

if __name__ == "__main__":
    api_handler = APIHandler('api-keys.json')
    api_handler.example_usage()
