import psutil
import csv
import time
import logging

class MonitoringAgent:
    def __init__(self, cpu_usage_file, network_traffic_file):
        self.cpu_usage_file = cpu_usage_file
        self.network_traffic_file = network_traffic_file
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler('monitoring_agent.log')
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

    def monitor_cpu_usage(self):
        with open(self.cpu_usage_file, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Timestamp', 'CPU Usage'])
            while True:
                cpu_usage = psutil.cpu_percent(interval=1)
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                writer.writerow([timestamp, cpu_usage])
                self.logger.info(f'CPU Usage at {timestamp}: {cpu_usage}%')
                time.sleep(1)

    def monitor_network_traffic(self):
        with open(self.network_traffic_file, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Timestamp', 'Bytes Sent', 'Bytes Received'])
            while True:
                net_io = psutil.net_io_counters()
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                writer.writerow([timestamp, net_io.bytes_sent, net_io.bytes_recv])
                self.logger.info(f'Network Traffic at {timestamp}: Bytes Sent={net_io.bytes_sent}, Bytes Received={net_io.bytes_recv}')
                time.sleep(1)

    def example_usage(self):
        # Simulated monitoring data
        self.monitor_cpu_usage()
        self.monitor_network_traffic()

if __name__ == "__main__":
    agent = MonitoringAgent('metrics/cpu-usage.csv', 'metrics/network-traffic.csv')
    agent.example_usage()
