import logging
import psutil
import time
import json
import os
from typing import Dict, Any, List, Optional
import schedule
from datetime import datetime
import socket
import uuid
import platform
import subprocess
from scapy.all import sniff, IP, TCP, UDP, ICMP

# Setup logging
logging.basicConfig(filename='logs/intrusion-detection.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Ensure logs directory exists
LOG_DIR = 'logs'
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

INTRUSION_LOG_FILE = os.path.join(LOG_DIR, 'intrusion-detection.log')
SIGNATURES_FILE = 'firewall-rules.json'

class IntrusionDetectionSystem:
    def __init__(self, interval: int = 5):
        self.interval = interval
        self.host_id = self._get_host_id()
        self.signatures = self._load_signatures()
        self.suspicious_ips = set()

    def _get_host_id(self) -> str:
        """Generate a unique host ID."""
        try:
            return str(uuid.uuid5(uuid.NAMESPACE_DNS, socket.gethostname()))
        except Exception as e:
            logging.error(f"Error generating host ID: {e}")
            return str(uuid.uuid4())

    def _load_signatures(self) -> List[Dict[str, Any]]:
        """Load intrusion detection signatures from a JSON file."""
        try:
            with open(SIGNATURES_FILE, 'r') as f:
                data = json.load(f)
                return data.get('firewall_rules', [])
        except FileNotFoundError:
            logging.error(f"Signatures file not found: {SIGNATURES_FILE}")
            return []
        except json.JSONDecodeError:
            logging.error(f"Error decoding JSON from signatures file: {SIGNATURES_FILE}")
            return []

    def _monitor_network_traffic(self):
        """Monitor network traffic for suspicious activity."""
        try:
            net_io = psutil.net_io_counters()
            timestamp = datetime.now().isoformat()
            logging.info(f"Network Traffic at {timestamp}: Host ID: {self.host_id}, Bytes sent: {net_io.bytes_sent}, Bytes received: {net_io.bytes_recv}")
        except Exception as e:
            logging.error(f"Error monitoring network traffic: {e}")

    def _detect_intrusions(self, packet):
        """Detect intrusions based on predefined signatures."""
        try:
            if IP in packet:
                ip_src = packet[IP].src
                ip_dst = packet[IP].dst
                protocol = None
                port_src = None
                port_dst = None

                if TCP in packet:
                    protocol = 'TCP'
                    port_src = packet[TCP].sport
                    port_dst = packet[TCP].dport
                elif UDP in packet:
                    protocol = 'UDP'
                    port_src = packet[UDP].sport
                    port_dst = packet[UDP].dport
                elif ICMP in packet:
                    protocol = 'ICMP'

                if protocol:
                    for rule in self.signatures:
                        if rule['protocol'] == protocol and (rule.get('port') is None or str(port_dst) in rule.get('port', '').split(',')):
                            if rule.get('source') == '0.0.0.0/0' or self._is_ip_in_cidr(ip_src, rule.get('source', '')):
                                if rule['action'] == 'deny':
                                    logging.warning(f"Intrusion detected! Denying traffic from {ip_src} to {ip_dst} on port {port_dst} based on rule {rule['rule_id']}")
                                    self._block_ip(ip_src)
                                    self.suspicious_ips.add(ip_src)
                                    return
                                elif rule['action'] == 'allow':
                                    logging.info(f"Traffic allowed from {ip_src} to {ip_dst} on port {port_dst} based on rule {rule['rule_id']}")
                                    return
        except Exception as e:
            logging.error(f"Error during intrusion detection: {e}")

    def _is_ip_in_cidr(self, ip_address: str, cidr: str) -> bool:
        """Check if an IP address is within a CIDR range."""
        try:
            ip_int = int(''.join(format(int(x), '08b') for x in ip_address.split('.')), 2)
            cidr_ip, cidr_mask = cidr.split('/')
            cidr_int = int(''.join(format(int(x), '08b') for x in cidr_ip.split('.')), 2)
            mask = int('1' * int(cidr_mask) + '0' * (32 - int(cidr_mask)), 2)
            return (ip_int & mask) == (cidr_int & mask)
        except Exception as e:
            logging.error(f"Error checking IP in CIDR: {e}")
            return False

    def _block_ip(self, ip_address: str):
        """Block a suspicious IP address."""
        try:
            if platform.system() == 'Linux':
                subprocess.run(['sudo', 'iptables', '-A', 'INPUT', '-s', ip_address, '-j', 'DROP'], check=True)
                logging.warning(f"Blocked IP address: {ip_address}")
            elif platform.system() == 'Windows':
                 subprocess.run(['powershell', 'New-NetFirewallRule', '-DisplayName', f'Block IP {ip_address}', '-Direction', 'Inbound', '-Action', 'Block', '-RemoteAddress', ip_address], check=True)
                 logging.warning(f"Blocked IP address: {ip_address}")
        except Exception as e:
            logging.error(f"Error blocking IP address: {e}")

    def _monitor_suspicious_ips(self):
        """Monitor and log suspicious IPs."""
        if self.suspicious_ips:
            logging.warning(f"Suspicious IPs detected: {self.suspicious_ips}")
            self.suspicious_ips.clear()

    def _schedule_intrusion_detection(self):
        """Schedule intrusion detection tasks."""
        schedule.every(self.interval).seconds.do(self._monitor_network_traffic)
        schedule.every(self.interval * 5).seconds.do(self._monitor_suspicious_ips)

        def packet_handler(packet):
            self._detect_intrusions(packet)

        sniff(prn=packet_handler, store=0, iface="eth0")

        while True:
            schedule.run_pending()
            time.sleep(1)

    def start_intrusion_detection(self):
        """Start intrusion detection system."""
        logging.info("Starting intrusion detection system...")
        self._schedule_intrusion_detection()

if __name__ == '__main__':
    ids = IntrusionDetectionSystem(interval=5)
    ids.start_intrusion_detection()
