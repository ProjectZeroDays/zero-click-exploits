import json
import hashlib
import logging

class UserAuthentication:
    def __init__(self, user_db_path):
        self.user_db_path = user_db_path
        self.users = self.load_user_database()
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler('user_authentication.log')
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

    def load_user_database(self):
        try:
            with open(self.user_db_path, 'r') as file:
                users = json.load(file)
        except FileNotFoundError:
            users = {}
        return users

    def hash_password(self, password):
        return hashlib.sha256(password.encode()).hexdigest()

    def authenticate_user(self, username, password):
        hashed_password = self.hash_password(password)
        user = self.users.get(username)
        if user and user['password'] == hashed_password:
            self.logger.info(f"User {username} authenticated successfully")
            return True
        else:
            self.logger.warning(f"Failed authentication attempt for user {username}")
            return False

    def login(self, username, password):
        if self.authenticate_user(username, password):
            return {"status": "success", "message": "Login successful"}
        else:
            return {"status": "failure", "message": "Invalid username or password"}

    def example_usage(self):
        user_db_path = 'user-database.json'
        auth = UserAuthentication(user_db_path)
        print(auth.login('test_user', 'test_password'))

if __name__ == "__main__":
    UserAuthentication('user-database.json').example_usage()
