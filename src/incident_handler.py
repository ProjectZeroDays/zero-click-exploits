import logging
import subprocess
import os
import json
from typing import Dict, Any, List, Optional
from abc import ABC, abstractmethod
import schedule
import time
from datetime import datetime

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Abstract Base Class for Playbooks
class Playbook(ABC):
    def __init__(self, playbook_path: str, playbook_name: str):
        self.playbook_path = playbook_path
        self.playbook_name = playbook_name
        self.steps = self._load_playbook()

    @abstractmethod
    def _load_playbook(self) -> List[Dict[str, Any]]:
        try:
            with open(self.playbook_path, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            logging.error(f"Playbook file not found: {self.playbook_path}")
            return []
        except json.JSONDecodeError:
            logging.error(f"Error decoding JSON from playbook file: {self.playbook_path}")
            return []

    @abstractmethod
    def execute_playbook(self, incident_details: Dict[str, Any]):
        for step in self.steps:
            action = step.get('action')
            command = step.get('command')
            if action and command:
                try:
                    subprocess.run(command, shell=True, check=True)
                    logging.info(f"Executed command: {command}")
                except subprocess.CalledProcessError as e:
                    logging.error(f"Failed to execute command: {command} - {e}")
            elif action == 'log_event':
                logging.info(f"Logged event: {step.get('message')}")
            else:
                logging.warning(f"Unknown action: {action}")

# Concrete Class for Ransomware Playbook
class RansomwarePlaybook(Playbook):
    def __init__(self, playbook_path: str = 'playbooks/ransomware-playbook.json'):
        super().__init__(playbook_path, 'Ransomware Playbook')

# Concrete Class for Phishing Playbook
class PhishingPlaybook(Playbook):
    def __init__(self, playbook_path: str = 'playbooks/phishing-playbook.json'):
        super().__init__(playbook_path, 'Phishing Playbook')

# Incident Handler
class IncidentHandler:
    def __init__(self):
        self.playbooks = {
            'ransomware': RansomwarePlaybook(),
            'phishing': PhishingPlaybook()
        }
        self.incident_queue = []

    def handle_incident(self, incident_type: str, severity: str, details: Dict[str, Any]):
        """Handle different types of incidents based on severity."""
        incident_details = {
            'type': incident_type,
            'severity': severity,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
        logging.info(f"Received incident: {incident_details}")
        self.incident_queue.append(incident_details)
        self._process_incident(incident_details)

    def _process_incident(self, incident_details: Dict[str, Any]):
        """Process incident based on type and severity."""
        incident_type = incident_details.get('type')
        severity = incident_details.get('severity')

        if incident_type in self.playbooks:
            playbook = self.playbooks[incident_type]
            playbook.execute_playbook(incident_details)
        else:
            logging.warning(f"No playbook found for incident type: {incident_type}")
            self._execute_default_response(incident_details)

    def _execute_default_response(self, incident_details: Dict[str, Any]):
        """Execute default incident response."""
        logging.info(f"Executing default incident response for: {incident_details}")
        # Add default response logic here
        logging.info("Default incident response completed.")

    def schedule_incident_processing(self, interval_seconds: int = 60):
        """Schedule incident processing at regular intervals."""
        def job():
            logging.info("Starting scheduled incident processing...")
            if self.incident_queue:
                incident = self.incident_queue.pop(0)
                self._process_incident(incident)
            else:
                logging.info("No incidents in queue.")
            logging.info("Scheduled incident processing completed.")

        schedule.every(interval_seconds).seconds.do(job)
        while True:
            schedule.run_pending()
            time.sleep(1)

    def load_playbook_data(self, file_path: str) -> Optional[Dict[str, Any]]:
        """Load playbook data from a JSON file."""
        try:
            with open(file_path, 'r') as f:
                playbook_data = json.load(f)
            logging.info(f"Loaded playbook data from {file_path}")
            return playbook_data
        except FileNotFoundError:
            logging.error(f"Playbook data file not found: {file_path}")
            return None
        except json.JSONDecodeError:
            logging.error(f"Error decoding JSON from {file_path}")
            return None

    def start_incident_handling(self, interval_seconds: int = 60):
        """Start incident handling and processing."""
        self.schedule_incident_processing(interval_seconds)

if __name__ == '__main__':
    handler = IncidentHandler()
    incident_data = {'type': 'ransomware', 'severity': 'high', 'details': {'target': 'server1'}}
    handler.handle_incident(incident_data['type'], incident_data['severity'], incident_data['details'])
    incident_data = {'type': 'phishing', 'severity': 'medium', 'details': {'email': 'user@example.com'}}
    handler.handle_incident(incident_data['type'], incident_data['severity'], incident_data['details'])
    handler.start_incident_handling(interval_seconds=30)
