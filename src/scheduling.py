import json
from datetime import datetime, timedelta

class Scheduling:
    def __init__(self, schedule_file):
        self.schedule_file = schedule_file
        self.schedule = self.load_schedule()

    def load_schedule(self):
        try:
            with open(self.schedule_file, 'r') as file:
                schedule = json.load(file)
        except FileNotFoundError:
            schedule = {}
        return schedule

    def save_schedule(self):
        with open(self.schedule_file, 'w') as file:
            json.dump(self.schedule, file, indent=4)

    def schedule_audit(self, audit_id, audit_info):
        if audit_id in self.schedule:
            raise ValueError("Audit already scheduled")
        self.schedule[audit_id] = audit_info
        self.save_schedule()

    def remove_audit(self, audit_id):
        if audit_id not in self.schedule:
            raise ValueError("Audit not found")
        del self.schedule[audit_id]
        self.save_schedule()

    def update_audit(self, audit_id, audit_info):
        if audit_id not in self.schedule:
            raise ValueError("Audit not found")
        self.schedule[audit_id] = audit_info
        self.save_schedule()

    def get_audit(self, audit_id):
        return self.schedule.get(audit_id, None)

    def list_audits(self):
        return list(self.schedule.keys())

    def generate_audit_report(self, audit_id):
        audit_info = self.get_audit(audit_id)
        if not audit_info:
            raise ValueError("Audit not found")
        report = {
            "audit_id": audit_id,
            "audit_info": audit_info,
            "generated_at": datetime.now().isoformat()
        }
        return report

    def schedule_recurring_audit(self, audit_id, audit_info, interval_days):
        if audit_id in self.schedule:
            raise ValueError("Audit already scheduled")
        next_audit_date = datetime.now() + timedelta(days=interval_days)
        audit_info["next_audit_date"] = next_audit_date.isoformat()
        self.schedule[audit_id] = audit_info
        self.save_schedule()

    def update_recurring_audit(self, audit_id, interval_days):
        audit_info = self.get_audit(audit_id)
        if not audit_info:
            raise ValueError("Audit not found")
        next_audit_date = datetime.now() + timedelta(days=interval_days)
        audit_info["next_audit_date"] = next_audit_date.isoformat()
        self.schedule[audit_id] = audit_info
        self.save_schedule()
