import psutil
import time
import csv
import logging
import os
from typing import Dict, Any
import schedule
from datetime import datetime
import json
import socket
import uuid
import platform
import subprocess

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Ensure metrics directory exists
METRICS_DIR = 'metrics'
if not os.path.exists(METRICS_DIR):
    os.makedirs(METRICS_DIR)

CPU_USAGE_FILE = os.path.join(METRICS_DIR, 'cpu-usage.csv')
NETWORK_TRAFFIC_FILE = os.path.join(METRICS_DIR, 'network-traffic.csv')
SYSTEM_INFO_FILE = os.path.join(METRICS_DIR, 'system-info.json')

class MonitoringAgent:
    def __init__(self, interval: int = 5):
        self.interval = interval
        self.host_id = self._get_host_id()
        self._collect_system_info()

    def _get_host_id(self) -> str:
        """Generate a unique host ID."""
        try:
            return str(uuid.uuid5(uuid.NAMESPACE_DNS, socket.gethostname()))
        except Exception as e:
            logging.error(f"Error generating host ID: {e}")
            return str(uuid.uuid4())

    def _collect_system_info(self):
        """Collect system information and save to a JSON file."""
        try:
            system_info = {
                'host_id': self.host_id,
                'hostname': socket.gethostname(),
                'os': platform.system(),
                'os_version': platform.release(),
                'architecture': platform.machine(),
                'cpu_count': psutil.cpu_count(),
                'memory_total': psutil.virtual_memory().total,
                'disk_total': psutil.disk_usage('/').total,
                'timestamp': datetime.now().isoformat()
            }
            with open(SYSTEM_INFO_FILE, 'w') as f:
                json.dump(system_info, f, indent=4)
            logging.info(f"Collected and saved system info to {SYSTEM_INFO_FILE}")
        except Exception as e:
            logging.error(f"Error collecting system info: {e}")

    def _monitor_cpu_usage(self):
        """Monitor CPU usage and log it."""
        try:
            with open(CPU_USAGE_FILE, 'a', newline='') as csvfile:
                fieldnames = ['timestamp', 'host_id', 'cpu_percent']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                if csvfile.tell() == 0:
                    writer.writeheader()
                cpu_percent = psutil.cpu_percent(interval=self.interval)
                timestamp = datetime.now().isoformat()
                writer.writerow({'timestamp': timestamp, 'host_id': self.host_id, 'cpu_percent': cpu_percent})
                logging.info(f"CPU Usage at {timestamp}: {cpu_percent}%")
        except Exception as e:
            logging.error(f"Error monitoring CPU usage: {e}")

    def _monitor_network_traffic(self):
        """Monitor network traffic and log it."""
        try:
            with open(NETWORK_TRAFFIC_FILE, 'a', newline='') as csvfile:
                fieldnames = ['timestamp', 'host_id', 'bytes_sent', 'bytes_recv']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                if csvfile.tell() == 0:
                    writer.writeheader()
                net_io = psutil.net_io_counters()
                timestamp = datetime.now().isoformat()
                writer.writerow({'timestamp': timestamp, 'host_id': self.host_id, 'bytes_sent': net_io.bytes_sent, 'bytes_recv': net_io.bytes_recv})
                logging.info(f"Network Traffic at {timestamp}: Bytes sent: {net_io.bytes_sent}, Bytes received: {net_io.bytes_recv}")
        except Exception as e:
            logging.error(f"Error monitoring network traffic: {e}")

    def _monitor_processes(self):
        """Monitor running processes and log suspicious ones."""
        try:
            for process in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_percent', 'create_time']):
                try:
                    process_info = process.info
                    if process_info['cpu_percent'] > 50 or process_info['memory_percent'] > 50:
                        logging.warning(f"Suspicious process detected: {process_info}")
                        # Add more sophisticated analysis here if needed
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
        except Exception as e:
            logging.error(f"Error monitoring processes: {e}")

    def _monitor_disk_usage(self):
        """Monitor disk usage and log it."""
        try:
            disk = psutil.disk_usage('/')
            logging.info(f"Disk Usage: Total: {disk.total}, Used: {disk.used}, Free: {disk.free}, Percent: {disk.percent}")
        except Exception as e:
            logging.error(f"Error monitoring disk usage: {e}")

    def _monitor_logged_in_users(self):
        """Monitor logged-in users."""
        try:
            users = psutil.users()
            logging.info(f"Logged-in users: {users}")
        except Exception as e:
            logging.error(f"Error monitoring logged-in users: {e}")

    def _monitor_system_services(self):
        """Monitor system services."""
        try:
            if platform.system() == 'Linux':
                services = subprocess.check_output(['systemctl', 'list-units', '--type=service', '--state=running']).decode('utf-8')
                logging.info(f"Running services:\n{services}")
            elif platform.system() == 'Windows':
                services = subprocess.check_output(['powershell', 'Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object Name']).decode('utf-8')
                logging.info(f"Running services:\n{services}")
        except Exception as e:
            logging.error(f"Error monitoring system services: {e}")

    def _schedule_monitoring(self):
        """Schedule monitoring tasks."""
        schedule.every(self.interval).seconds.do(self._monitor_cpu_usage)
        schedule.every(self.interval).seconds.do(self._monitor_network_traffic)
        schedule.every(self.interval * 2).seconds.do(self._monitor_processes)
        schedule.every(self.interval * 5).seconds.do(self._monitor_disk_usage)
        schedule.every(self.interval * 10).seconds.do(self._monitor_logged_in_users)
        schedule.every(self.interval * 15).seconds.do(self._monitor_system_services)

        while True:
            schedule.run_pending()
            time.sleep(1)

    def start_monitoring(self):
        """Start monitoring system metrics."""
        logging.info("Starting system monitoring...")
        self._schedule_monitoring()

if __name__ == '__main__':
    agent = MonitoringAgent(interval=5)
    agent.start_monitoring()
