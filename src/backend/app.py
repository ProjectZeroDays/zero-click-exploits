import functools
import logging
from flask import request, jsonify
from src.backend.core.config.settings_manager import SettingsManager

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    settings_manager = SettingsManager(logger)
except Exception as e:
    logger.error(f"Error initializing SettingsManager: {e}")
    settings_manager = None

def update_deployment_status(deployment_id, status):
    """
    Update the deployment status in the database.
    """
    try:
        deployment = settings_manager.get_deployment_by_id(deployment_id)
        if deployment:
            deployment.status = status
            settings_manager.save_deployment(deployment)
            return True
        else:
            return False
    except Exception as e:
        logger.error(f"Error updating deployment status: {e}")
        return False

def get_deployment_status(deployment_id):
    """
    Retrieve the deployment status from the database.
    """
    try:
        deployment = settings_manager.get_deployment_by_id(deployment_id)
        if deployment:
            return deployment.status
        else:
            return None
    except Exception as e:
        logger.error(f"Error retrieving deployment status: {e}")
        return None

def require_api_key(f):
    """
    Decorator to enforce API key requirement for endpoints.
    """
    @functools.wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key')
        if api_key:
            logger.info(f"API key provided: {api_key}")
            if settings_manager:
                try:
                    if api_key == settings_manager.get_setting("general", "api_key"):
                        return f(*args, **kwargs)
                    else:
                        logger.warning("Invalid API key provided")
                        return jsonify({"error": "Unauthorized"}), 401
                except Exception as e:
                    logger.error(f"Error validating API key: {e}")
                    return jsonify({"error": "Internal Server Error"}), 500
            else:
                logger.error("SettingsManager is not initialized")
                return jsonify({"error": "Internal Server Error"}), 500
        else:
            logger.warning("No API key provided")
            return jsonify({"error": "Unauthorized"}), 401
    return decorated_function

def integrate_with_new_components(new_component_data):
    integrated_data = {
        "new_component_exploit_data": new_component_data.get("exploit_data", {}),
        "new_component_model_data": new_component_data.get("model_data", {})
    }
    return integrated_data

def ensure_compatibility(existing_data, new_component_data):
    compatible_data = {
        "existing_exploit_data": existing_data.get("exploit_data", {}),
        "existing_model_data": existing_data.get("model_data", {}),
        "new_component_exploit_data": new_component_data.get("exploit_data", {}),
        "new_component_model_data": new_component_data.get("model_data", {})
    }
    return compatible_data
