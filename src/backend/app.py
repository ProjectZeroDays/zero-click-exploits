import functools
from flask import request, jsonify
from src.backend.core.config.settings_manager import SettingsManager

settings_manager = SettingsManager()

def update_deployment_status(deployment_id, status):
    """
    Update the deployment status in the database.
    """
    try:
        deployment = settings_manager.get_deployment_by_id(deployment_id)
        if deployment:
            deployment.status = status
            settings_manager.save_deployment(deployment)
            return True
        else:
            return False
    except Exception as e:
        print(f"Error updating deployment status: {e}")
        return False

def get_deployment_status(deployment_id):
    """
    Retrieve the deployment status from the database.
    """
    try:
        deployment = settings_manager.get_deployment_by_id(deployment_id)
        if deployment:
            return deployment.status
        else:
            return None
    except Exception as e:
        print(f"Error retrieving deployment status: {e}")
        return None

def require_api_key(f):
    """
    Decorator to enforce API key requirement for endpoints.
    """
    @functools.wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key')
        if api_key and api_key == settings_manager.get_api_key():
            return f(*args, **kwargs)
        else:
            return jsonify({"error": "Unauthorized"}), 401
    return decorated_function
