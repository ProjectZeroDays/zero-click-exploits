import logging
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

class AITraining:
    def __init__(self, model, data, labels):
        self.model = model
        self.data = data
        self.labels = labels
        self.logger = logging.getLogger(__name__)

    def train_model(self, epochs=10, batch_size=32):
        self.logger.info("Starting AI model training")
        X_train, X_val, y_train, y_val = train_test_split(self.data, self.labels, test_size=0.2, random_state=42)
        self.model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_val, y_val))
        self.logger.info("AI model training completed")

    def evaluate_model(self):
        self.logger.info("Evaluating AI model performance")
        X_train, X_val, y_train, y_val = train_test_split(self.data, self.labels, test_size=0.2, random_state=42)
        y_pred = self.model.predict(X_val)
        y_pred = (y_pred > 0.5).astype(int)
        accuracy = accuracy_score(y_val, y_pred)
        precision = precision_score(y_val, y_pred, average='weighted', zero_division=0)
        recall = recall_score(y_val, y_pred, average='weighted', zero_division=0)
        f1 = f1_score(y_val, y_pred, average='weighted', zero_division=0)
        self.logger.info(f"Model Evaluation: Accuracy={accuracy:.4f}, Precision={precision:.4f}, Recall={recall:.4f}, F1-Score={f1:.4f}")
        return accuracy, precision, recall, f1

    def integrate_with_new_components(self, new_component_data):
        self.logger.info("Integrating with new components")
        integrated_data = {
            "new_component_training_data": new_component_data.get("training_data", []),
            "new_component_model_config": new_component_data.get("model_config", {})
        }
        return integrated_data

    def ensure_compatibility(self, existing_data, new_component_data):
        self.logger.info("Ensuring compatibility with existing AI training logic")
        compatible_data = {
            "existing_training_data": existing_data.get("training_data", []),
            "existing_model_config": existing_data.get("model_config", {}),
            "new_component_training_data": new_component_data.get("training_data", []),
            "new_component_model_config": new_component_data.get("model_config", {})
        }
        return compatible_data
