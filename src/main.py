import logging
import asyncio
from src.ai import ai_module
from src.exploit import exploit_module
from src.network import network_module
from src.config import config_loader

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def deploy_exploit_async(target_ip, target_port, ai_agent, exploit_manager, network_handler):
    try:
        logging.info(f"Target: {target_ip}:{target_port}")
        best_exploit = ai_agent.select_exploit(target_ip, target_port)
        if best_exploit:
            logging.info(f"Best exploit selected: {best_exploit}")
            await exploit_manager.deploy_exploit(best_exploit, target_ip, target_port, network_handler)
        else:
            logging.warning("No suitable exploit found.")
    except Exception as e:
        logging.error(f"Error during exploit deployment: {e}")

async def main():
    try:
        logging.info("Starting AI-Driven Zero-Click Exploit Deployment Framework")
        config = config_loader.load_config("config/config.yaml")
        ai_agent = ai_module.create_ai_agent(config)
        exploit_manager = exploit_module.create_exploit_manager(config)
        network_handler = network_module.create_network_handler(config)

        targets = [("192.168.1.100", 80), ("192.168.1.101", 8080), ("192.168.1.102", 443)]
        tasks = [deploy_exploit_async(ip, port, ai_agent, exploit_manager, network_handler) for ip, port in targets]
        await asyncio.gather(*tasks)

        logging.info("Framework execution completed.")
    except Exception as e:
        logging.critical(f"An unhandled exception occurred: {e}")

if __name__ == "__main__":
    asyncio.run(main())
