import logging
from src.ai import ai_module
from src.exploit import exploit_module
from src.network import network_module
from src.config import config_loader

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def main():
    logging.info("Starting AI-Driven Zero-Click Exploit Deployment Framework")

    try:
        config = config_loader.load_config("config/config.yaml")
        logging.info("Configuration loaded successfully.")
    except Exception as e:
        logging.error(f"Error loading configuration: {e}")
        return

    try:
        ai_agent = ai_module.create_ai_agent(config)
        logging.info("AI agent initialized.")
    except Exception as e:
        logging.error(f"Error initializing AI agent: {e}")
        return

    try:
        exploit_manager = exploit_module.create_exploit_manager(config)
        logging.info("Exploit manager initialized.")
    except Exception as e:
        logging.error(f"Error initializing exploit manager: {e}")
        return

    try:
        network_handler = network_module.create_network_handler(config)
        logging.info("Network handler initialized.")
    except Exception as e:
        logging.error(f"Error initializing network handler: {e}")
        return

    # Example usage
    target_ip = "192.168.1.100"
    target_port = 80
    logging.info(f"Target: {target_ip}:{target_port}")

    try:
        best_exploit = ai_agent.select_exploit(target_ip, target_port)
        if best_exploit:
            logging.info(f"Best exploit selected: {best_exploit}")
            exploit_manager.deploy_exploit(best_exploit, target_ip, target_port, network_handler)
        else:
            logging.warning("No suitable exploit found.")
    except Exception as e:
        logging.error(f"Error during exploit deployment: {e}")

    logging.info("Framework execution completed.")

if __name__ == "__main__":
    main()
