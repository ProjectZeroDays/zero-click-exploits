import logging
import random

class IntrusionDetectionSystem:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler('intrusion_detection.log')
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

    def monitor_network_traffic(self):
        # Simulated network traffic data
        traffic_data = [random.randint(0, 100) for _ in range(100)]
        self.logger.info(f"Monitoring network traffic: {traffic_data}")
        return traffic_data

    def monitor_system_logs(self):
        # Simulated system log data
        log_data = [f"Log entry {i}" for i in range(100)]
        self.logger.info(f"Monitoring system logs: {log_data}")
        return log_data

    def detect_intrusions(self, traffic_data, log_data):
        # Simulated intrusion detection logic
        intrusions = [i for i in range(len(traffic_data)) if traffic_data[i] > 80]
        self.logger.info(f"Detected intrusions at indices: {intrusions}")
        return intrusions

    def log_intrusions(self, intrusions):
        self.logger.info(f"Intrusions detected at indices: {intrusions}")

    def example_usage(self):
        traffic_data = self.monitor_network_traffic()
        log_data = self.monitor_system_logs()
        intrusions = self.detect_intrusions(traffic_data, log_data)
        self.log_intrusions(intrusions)

if __name__ == "__main__":
    ids = IntrusionDetectionSystem()
    ids.example_usage()
