import logging
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes

class EncryptionHandler:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler('encryption.log')
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

    def generate_keys(self):
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048
        )
        public_key = private_key.public_key()
        self.logger.info("RSA keys generated")
        return private_key, public_key

    def save_keys(self, private_key, public_key, private_key_path, public_key_path):
        pem_private_key = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
        pem_public_key = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        with open(private_key_path, 'wb') as private_file:
            private_file.write(pem_private_key)
        with open(public_key_path, 'wb') as public_file:
            public_file.write(pem_public_key)
        self.logger.info("RSA keys saved to files")

    def load_keys(self, private_key_path, public_key_path):
        with open(private_key_path, 'rb') as private_file:
            private_key = serialization.load_pem_private_key(
                private_file.read(),
                password=None
            )
        with open(public_key_path, 'rb') as public_file:
            public_key = serialization.load_pem_public_key(
                public_file.read()
            )
        self.logger.info("RSA keys loaded from files")
        return private_key, public_key

    def encrypt(self, public_key, plaintext):
        ciphertext = public_key.encrypt(
            plaintext,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        self.logger.info("Data encrypted")
        return ciphertext

    def decrypt(self, private_key, ciphertext):
        plaintext = private_key.decrypt(
            ciphertext,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        self.logger.info("Data decrypted")
        return plaintext

    def example_usage(self):
        private_key, public_key = self.generate_keys()
        self.save_keys(private_key, public_key, 'private_key.pem', 'public_key.pem')
        private_key, public_key = self.load_keys('private_key.pem', 'public_key.pem')
        plaintext = b"Sensitive data"
        ciphertext = self.encrypt(public_key, plaintext)
        decrypted_text = self.decrypt(private_key, ciphertext)
        assert plaintext == decrypted_text
        self.logger.info("Example usage completed successfully")

if __name__ == "__main__":
    handler = EncryptionHandler()
    handler.example_usage()
