import logging
import requests
from typing import List, Dict, Any
import random
import threading

class ProxyChainManager:
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.proxies = {
            "socks5": [],
            "http": [],
            "https": []
        }
        self.current_proxy = None
        self.proxy_type = None
        self.session = requests.Session()
        self.proxy_rotation_enabled = False
        self.rotation_interval = 60 # Default rotation interval in seconds
        self._rotation_timer = None

    def add_proxy(self, proxy_type: str, proxy_address: str):
        if proxy_type in self.proxies:
            self.proxies[proxy_type].append(proxy_address)
            self.logger.info(f"Added {proxy_type} proxy: {proxy_address}")
        else:
            self.logger.warning(f"Invalid proxy type: {proxy_type}")

    def remove_proxy(self, proxy_type: str, proxy_address: str):
        if proxy_type in self.proxies and proxy_address in self.proxies[proxy_type]:
            self.proxies[proxy_type].remove(proxy_address)
            self.logger.info(f"Removed {proxy_type} proxy: {proxy_address}")
        else:
            self.logger.warning(f"Proxy not found: {proxy_address}")

    def get_proxies(self, proxy_type: str) -> List[str]:
        return self.proxies.get(proxy_type, [])

    def set_proxy(self, proxy_type: str, proxy_address: str):
        if proxy_type in self.proxies and proxy_address in self.proxies[proxy_type]:
            self.current_proxy = proxy_address
            self.proxy_type = proxy_type
            self.logger.info(f"Set current proxy to {proxy_type}: {proxy_address}")
            self._configure_session()
        else:
            self.logger.warning(f"Proxy not found: {proxy_address}")

    def clear_proxy(self):
        self.current_proxy = None
        self.proxy_type = None
        self.session.proxies.clear()
        self.logger.info("Cleared current proxy.")

    def get_current_proxy(self) -> Dict[str, str]:
        return {"type": self.proxy_type, "address": self.current_proxy} if self.current_proxy else None

    def _configure_session(self):
        if self.current_proxy and self.proxy_type:
            self.session.proxies.update({
                "http": f"{self.proxy_type}://{self.current_proxy}",
                "https": f"{self.proxy_type}://{self.current_proxy}"
            })
        else:
            self.session.proxies.clear()

    def enable_proxy_rotation(self, interval: int = 60):
        """Enables automatic proxy rotation."""
        if not any(self.proxies.values()):
            self.logger.warning("No proxies available for rotation.")
            return
        self.proxy_rotation_enabled = True
        self.rotation_interval = interval
        self.logger.info(f"Proxy rotation enabled with interval: {interval} seconds.")
        self._start_rotation_timer() # Start the rotation timer

    def disable_proxy_rotation(self):
        """Disables automatic proxy rotation."""
        self.proxy_rotation_enabled = False
        self._stop_rotation_timer()
        self.logger.info("Proxy rotation disabled.")

    def _start_rotation_timer(self):
        """Starts the proxy rotation timer."""
        if self.proxy_rotation_enabled:
            self._rotate_proxy()
            self._rotation_timer = threading.Timer(self.rotation_interval, self._start_rotation_timer)
            self._rotation_timer.start()

    def _stop_rotation_timer(self):
        """Stops the proxy rotation timer."""
        if self._rotation_timer:
            self._rotation_timer.cancel()
            self._rotation_timer = None

    def _rotate_proxy(self):
        """Rotates to the next available proxy."""
        if not self.proxy_rotation_enabled:
            return

        available_proxies = []
        for proxy_type, proxies in self.proxies.items():
            available_proxies.extend([(proxy_type, proxy) for proxy in proxies])

        if not available_proxies:
            self.logger.warning("No proxies available for rotation.")
            self.clear_proxy()
            return

        if self.current_proxy:
            current_index = -1
            for i, (proxy_type, proxy) in enumerate(available_proxies):
                if proxy == self.current_proxy and proxy_type == self.proxy_type:
                    current_index = i
                    break
            next_index = (current_index + 1) % len(available_proxies)
        else:
            next_index = random.randint(0, len(available_proxies) - 1)

        next_proxy_type, next_proxy_address = available_proxies[next_index]
        self.set_proxy(next_proxy_type, next_proxy_address)
        self.logger.info(f"Rotated proxy to {next_proxy_type}: {next_proxy_address}")

    def test_proxy(self, url: str = "https://www.google.com", timeout: int = 5) -> bool:
        """Tests the current proxy by making a request to the given URL."""
        if not self.current_proxy:
            self.logger.warning("No proxy set to test.")
            return False
        try:
            response = self.session.get(url, timeout=timeout)
            response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
            self.logger.info(f"Proxy {self.proxy_type}:{self.current_proxy} is working.")
            return True
        except requests.exceptions.RequestException as e:
            self.logger.error(f"Proxy {self.proxy_type}:{self.current_proxy} test failed: {e}")
            return False

    def get_session(self) -> requests.Session:
        """Returns the current requests session with configured proxy."""
        return self.session
