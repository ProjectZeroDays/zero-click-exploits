import logging
import subprocess
import random
import time
import uuid
import ipaddress
from typing import Dict, Any
import platform

class IdentityManager:
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        self.original_mac = None
        self.original_ip = None
        self.interface = self._get_default_interface()

    def _get_default_interface(self) -> str:
        """Detects the default network interface."""
        system = platform.system()
        if system == "Linux":
            try:
                result = subprocess.run(["route", "-n"], capture_output=True, text=True, check=True)
                for line in result.stdout.splitlines():
                    if "UG" in line and "0.0.0.0" in line:
                        return line.split()[-1]
            except Exception as e:
                self.logger.error(f"Error detecting default interface: {e}")
                return "eth0"  # Default to eth0 if detection fails
        elif system == "Darwin":
            try:
                result = subprocess.run(["route", "-n", "get", "default"], capture_output=True, text=True, check=True)
                for line in result.stdout.splitlines():
                    if "interface:" in line:
                        return line.split("interface:")[1].strip()
            except Exception as e:
                self.logger.error(f"Error detecting default interface: {e}")
                return "en0"  # Default to en0 if detection fails
        else:
            self.logger.warning(f"Unsupported OS: {system}. Defaulting to eth0.")
            return "eth0"
        return "eth0"

    def get_current_mac(self, interface: str = None) -> str:
        interface = interface or self.interface
        try:
            result = subprocess.run(["ifconfig", interface], capture_output=True, text=True, check=True)
            for line in result.stdout.splitlines():
                if "ether" in line or "lladdr" in line:
                    parts = line.split("ether" if "ether" in line else "lladdr")
                    if len(parts) > 1:
                        return parts[1].strip().split(" ")[0]
            return None
        except Exception as e:
            self.logger.error(f"Error getting MAC address: {e}")
            return None

    def get_current_ip(self, interface: str = None) -> str:
        interface = interface or self.interface
        try:
            result = subprocess.run(["ifconfig", interface], capture_output=True, text=True