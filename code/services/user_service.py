import logging
from typing import Optional, Dict, Any, List
from src.models.user import User
from src.utils.database import Database

class UserService:
    def __init__(self, db: Database):
        self.db = db

    def get_user_by_id(self, user_id: int) -> Optional[Dict[str, Any]]:
        user = self.db.get_user(user_id)
        if user:
            return user
        return None

    def get_all_users(self) -> List[Dict[str, Any]]:
        return self.db.list_users()

    def create_user(self, username: str, email: str, password: str, role: str) -> Optional[int]:
        password_hash = self.hash_password(password)
        user_id = self.db.create_user(username, email, password_hash, role)
        if user_id:
            return user_id
        return None

    def update_user(self, user_id: int, username: Optional[str] = None, email: Optional[str] = None, role: Optional[str] = None) -> bool:
        return self.db.update_user(user_id, username, email, role)

    def delete_user(self, user_id: int) -> bool:
        return self.db.delete_user(user_id)

    def hash_password(self, password: str) -> str:
        # Implement password hashing logic here
        return password  # Placeholder, replace with actual hashing logic

if __name__ == "__main__":
    db = Database()
    user_service = UserService(db)

    # Example usage
    new_user_id = user_service.create_user("testuser", "test@example.com", "password", "admin")
    if new_user_id:
        retrieved_user = user_service.get_user_by_id(new_user_id)
        if retrieved_user:
            logging.info(f"Retrieved user: {retrieved_user}")
            user_service.update_user(retrieved_user["user_id"], username="updated_user")
            updated_user = user_service.get_user_by_id(new_user_id)
            if updated_user:
                logging.info(f"Updated user: {updated_user}")
                user_service.delete_user(updated_user["user_id"])
                logging.info("User deleted.")
            else:
                logging.error("Failed to update user.")
        else:
            logging.error("Failed to retrieve user.")
    else:
        logging.error("Failed to create user.")
    all_users = user_service.get_all_users()
    logging.info(f"All users: {all_users}")
