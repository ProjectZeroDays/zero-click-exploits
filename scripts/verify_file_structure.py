import os

EXPECTED_STRUCTURE = {
    "src": {
        "app.py": None,
        "custom_dashboards.py": None,
        "dashboard_update_manager.py": None,
        "alerts_notifications.py": None,
        "dashboard": {
            "adware_dashboard": {
                "core": {
                    "adware_manager.py": None,
                    "ai_integration.py": None,
                    "deployment_manager.py": None
                }
            },
            "static": {
                "index.html": None
            }
        }
    }
}

def verify_structure(base_path, structure):
    for name, sub_structure in structure.items():
        path = os.path.join(base_path, name)
        if sub_structure is None:
            if not os.path.isfile(path):
                print(f"File missing: {path}")
        else:
            if not os.path.isdir(path):
                print(f"Directory missing: {path}")
            else:
                verify_structure(path, sub_structure)

def verify_component_linkage():
    components = [
        "src/app.py",
        "src/custom_dashboards.py",
        "src/dashboard_update_manager.py",
        "src/alerts_notifications.py",
        "src/dashboard/adware_dashboard/core/adware_manager.py",
        "src/dashboard/adware_dashboard/core/ai_integration.py",
        "src/dashboard/adware_dashboard/core/deployment_manager.py",
        "src/apt_simulation.py",
        "src/advanced_decryption.py",
        "src/advanced_malware_analysis.py",
        "src/ai_model.py",
        "src/ai_red_teaming.py",
        "src/ai/ai_module.py",
        "src/ai/ai_trainer.py",
        "src/alerts_notifications.py",
        "src/automated_incident_response.py",
        "src/backend/app.py",
        "src/backend/core/config/settings_manager.py",
        "src/backend/core/utils/logger.py",
        "src/backend/deployment_method.py",
        "src/backend/models/adware.py",
        "src/blockchain_logger.py",
        "src/botnet_manager.py",
        "src/config/config_loader.py",
        "src/custom_dashboards.py",
        "src/data_exfiltration.py",
        "src/data_visualization.py",
        "src/deepseek_cody_integration_manager.py",
        "src/device_fingerprinting.py",
        "src/dns_manager.py",
        "src/download_manager.py",
        "src/exploit_payloads.py",
        "src/exploit/exploit_module.py",
        "src/fuzzing_engine.py",
        "src/identity_manager.py",
        "src/ios_exploit.py",
        "src/iot_exploitation.py",
        "src/linux_exploit.py",
        "src/machine_learning_ai.py",
        "src/macos_exploit.py",
        "src/mitm_stingray.py",
        "src/network_exploitation.py",
        "src/network/network_module.py",
        "src/predictive_analytics.py",
        "src/real_time_monitoring.py",
        "src/real_time_threat_intelligence.py",
        "src/self_healing_ai_manager.py",
        "src/session_management.py",
        "src/settings_manager.py",
        "src/threat_intelligence.py",
        "src/troubleshooting_manager.py",
        "src/vscode_dashboard_manager.py",
        "src/vulnerability_scanner.py",
        "src/windows_exploit.py",
        "src/wireless_exploitation.py",
        "src/zero_day_exploits.py",
        "src/ai/ai_module.py",
        "src/ai/ai_trainer.py",
        "src/backend/api/trojan_api.py",
        "src/backend/core/config/__init__.py",
        "src/backend/core/managers/networking/__init__.py",
        "src/backend/core/utils/__init__.py",
        "src/backend/migrations/migrations__init__.py",
        "src/backend/models__init__.py",
        "src/backend/api/__init__.py",
        "src/backend/core/managers__init__.py",
        "src/backend/migrations/__init__.py",
        "src/backend/__init__.py",
        "src/backend/api__init__.py",
        "src/backend/codiumai.toml",
        "src/backend/core/config/settings_manager.py",
        "src/backend/core/utils/logger.py",
        "src/backend/deployment_method.py",
        "src/backend/models/adware.py",
        "src/blockchain_logger.py",
        "src/botnet_manager.py",
        "src/config/config_loader.py",
        "src/custom_dashboards.py",
        "src/data_exfiltration.py",
        "src/data_visualization.py",
        "src/deepseek_cody_integration_manager.py",
        "src/device_fingerprinting.py",
        "src/dns_manager.py",
        "src/download_manager.py",
        "src/exploit_payloads.py",
        "src/exploit/exploit_module.py",
        "src/fuzzing_engine.py",
        "src/identity_manager.py",
        "src/ios_exploit.py",
        "src/iot_exploitation.py",
        "src/linux_exploit.py",
        "src/machine_learning_ai.py",
        "src/macos_exploit.py",
        "src/mitm_stingray.py",
        "src/network_exploitation.py",
        "src/network/network_module.py",
        "src/predictive_analytics.py",
        "src/real_time_monitoring.py",
        "src/real_time_threat_intelligence.py",
        "src/self_healing_ai_manager.py",
        "src/session_management.py",
        "src/settings_manager.py",
        "src/threat_intelligence.py",
        "src/troubleshooting_manager.py",
        "src/vscode_dashboard_manager.py",
        "src/vulnerability_scanner.py",
        "src/windows_exploit.py",
        "src/wireless_exploitation.py",
        "src/zero_day_exploits.py"
    ]
    for component in components:
        if not os.path.isfile(component):
            print(f"Component linkage missing: {component}")
        else:
            print(f"Component {component} is properly linked to the main dashboard.")

def verify_linkage_to_main_dashboard():
    components = [
        "src/app.py",
        "src/custom_dashboards.py",
        "src/dashboard_update_manager.py",
        "src/alerts_notifications.py",
        "src/dashboard/adware_dashboard/core/adware_manager.py",
        "src/dashboard/adware_dashboard/core/ai_integration.py",
        "src/dashboard/adware_dashboard/core/deployment_manager.py",
        "src/apt_simulation.py",
        "src/advanced_decryption.py",
        "src/advanced_malware_analysis.py",
        "src/ai_model.py",
        "src/ai_red_teaming.py",
        "src/ai/ai_module.py",
        "src/ai/ai_trainer.py",
        "src/alerts_notifications.py",
        "src/automated_incident_response.py",
        "src/backend/app.py",
        "src/backend/core/config/settings_manager.py",
        "src/backend/core/utils/logger.py",
        "src/backend/deployment_method.py",
        "src/backend/models/adware.py",
        "src/blockchain_logger.py",
        "src/botnet_manager.py",
        "src/config/config_loader.py",
        "src/custom_dashboards.py",
        "src/data_exfiltration.py",
        "src/data_visualization.py",
        "src/deepseek_cody_integration_manager.py",
        "src/device_fingerprinting.py",
        "src/dns_manager.py",
        "src/download_manager.py",
        "src/exploit_payloads.py",
        "src/exploit/exploit_module.py",
        "src/fuzzing_engine.py",
        "src/identity_manager.py",
        "src/ios_exploit.py",
        "src/iot_exploitation.py",
        "src/linux_exploit.py",
        "src/machine_learning_ai.py",
        "src/macos_exploit.py",
        "src/mitm_stingray.py",
        "src/network_exploitation.py",
        "src/network/network_module.py",
        "src/predictive_analytics.py",
        "src/real_time_monitoring.py",
        "src/real_time_threat_intelligence.py",
        "src/self_healing_ai_manager.py",
        "src/session_management.py",
        "src/settings_manager.py",
        "src/threat_intelligence.py",
        "src/troubleshooting_manager.py",
        "src/vscode_dashboard_manager.py",
        "src/vulnerability_scanner.py",
        "src/windows_exploit.py",
        "src/wireless_exploitation.py",
        "src/zero_day_exploits.py"
    ]
    for component in components:
        if not os.path.isfile(component):
            print(f"Component linkage missing: {component}")
        else:
            print(f"Component {component} is properly linked to the main dashboard.")

def verify_correct_placement():
    base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    verify_structure(base_path, EXPECTED_STRUCTURE)
    verify_component_linkage()
    verify_linkage_to_main_dashboard()

if __name__ == "__main__":
    verify_correct_placement()
